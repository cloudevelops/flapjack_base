---

production:
  pid_dir: /var/run/flapjack/flapjack_processor_<%= @name %>
  log_dir: /var/log/flapjack/flapjack_processor_<%= @name %>
  daemonize: yes
  logger:
    level: INFO
    syslog_errors: yes
  redis:
    host: <%= scope.lookupvar('redis_base::base_redis_host') %>
    port: <%= scope.lookupvar('redis_base::base_redis_port') %>
    db: <%= scope.lookupvar('redis_base::base_redis_db') %>
  # Processes monitoring events off the *events* queue (a redis list) and decides
  # what actions to take (generate notification event, record state changes, etc)
  processor:
    enabled: yes
    queue: events
    notifier_queue: notifications
    archive_events: true
    events_archive_maxage: 10800
    # Flapjack sets scheduled maintenance on new check results so contacts aren't
    # notified as soon as Flapjack becomes aware of an entity to notify on.
    # This is useful is cases where your monitoring starts checking something
    # before it is completely provisioned
    # Value parsed by https://github.com/hpoydar/chronic_duration
    # You can disable this setting by specifying 0 seconds.
    new_check_scheduled_maintenance_duration: 100 years
    new_check_scheduled_maintenance_ignore_tags:
      - bypass_ncsm
    logger:
      level: INFO
      syslog_errors: yes
  # Processes notification events off the *notifications* queue (a redis list) and
  # works out who to notify, and on which media, and with what kind of notification
  # message. It then creates jobs for the various notification gateways below.
  notifier:
    enabled: no

